// <auto-generated />
using DataStorage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataStorage.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            FullAddress = "Kh Taleghani"
                        },
                        new
                        {
                            Id = 11,
                            FullAddress = "Kh Shariati"
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Roso",
                            GenreId = 1,
                            Name = "Emil"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Dasta",
                            GenreId = 2,
                            Name = "Ablah"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Jafarian",
                            GenreId = 1,
                            Name = "Tarikhe Kholafa"
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Name = "Tehran"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Tabriz"
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Policy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Novel"
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Age = 23,
                            Email = "abbas.abdi@gmail.com",
                            FullName = "Abbas Abdi",
                            Mobile = "09121224567"
                        },
                        new
                        {
                            Id = 11,
                            Age = 23,
                            Email = "alireza.alavi@gmail.com",
                            FullName = "Alireza Alavi",
                            Mobile = "09121224567"
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.MembersBook", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("MembersBooks");

                    b.HasData(
                        new
                        {
                            MemberId = 10,
                            BookId = 1,
                            Id = 1
                        },
                        new
                        {
                            MemberId = 10,
                            BookId = 2,
                            Id = 2
                        },
                        new
                        {
                            MemberId = 11,
                            BookId = 2,
                            Id = 3
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Name = "Tehran"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Azarbayjan Sharqi"
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.Address", b =>
                {
                    b.HasOne("App.Domain.Entities.Member", "Member")
                        .WithOne("Address")
                        .HasForeignKey("App.Domain.Entities.Address", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("App.Domain.Entities.Book", b =>
                {
                    b.HasOne("App.Domain.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("App.Domain.Entities.City", b =>
                {
                    b.HasOne("App.Domain.Entities.Address", "Address")
                        .WithOne("City")
                        .HasForeignKey("App.Domain.Entities.City", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("App.Domain.Entities.MembersBook", b =>
                {
                    b.HasOne("App.Domain.Entities.Book", "Book")
                        .WithMany("MembersBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Member", "Member")
                        .WithMany("MembersBooks")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("App.Domain.Entities.State", b =>
                {
                    b.HasOne("App.Domain.Entities.City", "City")
                        .WithOne("State")
                        .HasForeignKey("App.Domain.Entities.State", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("App.Domain.Entities.Address", b =>
                {
                    b.Navigation("City")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Entities.Book", b =>
                {
                    b.Navigation("MembersBooks");
                });

            modelBuilder.Entity("App.Domain.Entities.City", b =>
                {
                    b.Navigation("State")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("App.Domain.Entities.Member", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("MembersBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
